[{"pos": "epubcfi(/22/2/4/2[book-content]/2[sbo-rt-content]/2/98/1:20)", "pos_type": "epubcfi", "timestamp": "2024-05-07T02:11:01.166196+00:00", "type": "last-read"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/162/1:258", "highlighted_text": "By declaring T as a generic type after impl, Rust can identify that the type in the angle brackets in Point is a generic type rather than a concrete type.", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/162/1:114", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-20T06:56:11.148Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Generic Data Types", "In Method Definitions"], "type": "highlight", "uuid": "aOldF-K4UI2dQ8szhlR-hg"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/360/1:433", "highlighted_text": "T implements the PartialOrd trait", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/360/28/1:0", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-30T13:08:50.957Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Traits: Defining Shared Behavior", "Using Trait Bounds to Conditionally Implement Methods"], "type": "highlight", "uuid": "Ql4TdgxL9-IhCehoVMhJJA"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/360/1:392", "highlighted_text": "Pair<T> only implements the cmp_display method", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/360/24/1:0", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-30T13:11:36.072Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Traits: Defining Shared Behavior", "Using Trait Bounds to Conditionally Implement Methods"], "type": "highlight", "uuid": "sLNDcja4TTOzuiGDqKbD4w"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/370/2/1:25", "highlighted_text": "ToString", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/370/2/1:17", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-30T13:17:44.395Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Traits: Defining Shared Behavior", "Using Trait Bounds to Conditionally Implement Methods"], "type": "highlight", "uuid": "z7EooKEmCRNHs4yVbM9m1w"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/368/1:321", "highlighted_text": "the standard library implements the ToString trait on any type that implements the Display trait.", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/368/1:239", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-30T13:16:15.563Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Traits: Defining Shared Behavior", "Using Trait Bounds to Conditionally Implement Methods"], "type": "highlight", "uuid": "66hjY30fvWwZ6bjEFuYmHg"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/370/2/1:31", "highlighted_text": "T", "notes": "any type", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/370/2/1:30", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-30T13:18:07.474Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Traits: Defining Shared Behavior", "Using Trait Bounds to Conditionally Implement Methods"], "type": "highlight", "uuid": "CmI73cDuY3xMkKfPeCS4SQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/366/2[listing10-15]:15", "highlighted_text": "Conditionally", "notes": "<> trait bounds", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/366/2[listing10-15]:2", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-30T13:20:42.675Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Traits: Defining Shared Behavior", "Using Trait Bounds to Conditionally Implement Methods"], "type": "highlight", "uuid": "LEZTKZWflo50tIGhEZ3m8g"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/372/12/1:7", "highlighted_text": " we can turn integers into their corresponding String values like this because integers implement Display", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/372/2[Page_201]:160", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-30T13:24:46.170Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Traits: Defining Shared Behavior", "Using Trait Bounds to Conditionally Implement Methods"], "type": "highlight", "uuid": "4mOQS4i5t6JTUONq9iVoyA"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/378/1:188", "highlighted_text": "Traits and trait bounds let us write code that uses generic type parameters to reduce duplication but also specify to the compiler that we want the generic type to have particular behavior", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/378/1:0", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-30T13:25:28.804Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Traits: Defining Shared Behavior", "Using Trait Bounds to Conditionally Implement Methods"], "type": "highlight", "uuid": "niRrnFE3R_3HOqHY6XhkJA"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/378/1:457", "highlighted_text": "if we called a method on a type which didn’t define the method", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/378/1:395", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-30T13:26:24.324Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Traits: Defining Shared Behavior", "Using Trait Bounds to Conditionally Implement Methods"], "type": "highlight", "uuid": "_b7VFlyFhDgoytf2a5D2hw"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/408/2/2[Page_203]:188", "highlighted_text": "=", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/408/2/2[Page_203]:187", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-30T16:06:00.204Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Validating References with Lifetimes", "The Borrow Checker"], "type": "highlight", "uuid": "CwiskUmpaWI1nerSdT1NyQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/446/2/1:107", "highlighted_text": "&str, y: &str) -> &str", "notes": "This 3 has a relationship, connection. Is returen type loger then other 2 parameter type?", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/446/2/1:85", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-30T16:38:29.520Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Validating References with Lifetimes", "Generic Lifetimes in Functions"], "type": "highlight", "uuid": "N-0xjybkFkYt6VpZTx6y9A"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/416/2/1:112", "highlighted_text": "&", "notes": "referances tracking", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/416/2/1:111", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-30T16:40:54.510Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Validating References with Lifetimes", "The Borrow Checker"], "type": "highlight", "uuid": "DUX439rVyXmzDJ0YgS2C6Q"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/500/2/1:191", "highlighted_text": "string1.as_str(), string2.as_str()", "notes": "this 2 parabitare life time doesn't match to return type's life time.", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/500/2/1:157", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-30T17:21:48.581Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Validating References with Lifetimes", "Lifetime Annotations in Function Signatures"], "type": "highlight", "uuid": "QNqFPwbHvHaebBO95aU1IQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/388[h2-503106c10-0012]/2[PreventingDanglingReferenceswithLifetimes]:30", "highlighted_text": "Dangling References", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/388[h2-503106c10-0012]/2[PreventingDanglingReferenceswithLifetimes]:11", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-30T18:05:08.555Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Validating References with Lifetimes", "Preventing Dangling References with Lifetimes"], "type": "highlight", "uuid": "hmdvWbkd2RFUHqMk1_UvIw"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/390/1:129", "highlighted_text": "which cause a program to reference data other than the data it’s intended to reference.", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/390/1:42", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-30T18:47:13.172Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Validating References with Lifetimes", "Preventing Dangling References with Lifetimes"], "type": "highlight", "uuid": "gQwPjsPi1uKCtwBA_nrJgQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/396/4/4/1:391", "highlighted_text": "Rust indeed does not allow null values", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/396/4/4/1:353", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-30T18:48:20.061Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Validating References with Lifetimes", "Preventing Dangling References with Lifetimes"], "type": "highlight", "uuid": "XYdgWv5zTqJ_V7YzWNzeLQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/392/2/1:20", "highlighted_text": "r", "notes": " its scope is larger", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/392/2/1:19", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-30T19:02:40.096Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Validating References with Lifetimes", "Preventing Dangling References with Lifetimes"], "type": "highlight", "uuid": "aTHy9g-kMWZ1fXSlXd4TKg"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/392/2/1:55", "highlighted_text": "r", "notes": " its scope is not larger", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/392/2/1:54", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-30T19:02:53.204Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Validating References with Lifetimes", "Preventing Dangling References with Lifetimes"], "type": "highlight", "uuid": "UhY1VASjgbSZftAhhnWgfA"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/412/18/1:2", "highlighted_text": "sees that r has a lifetime of 'a but that it refers to memory with a lifetime of 'b", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/412/1:219", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-30T19:31:44.112Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Validating References with Lifetimes", "The Borrow Checker"], "type": "highlight", "uuid": "I9Ij_ij5_Bzug0viER4AvA"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/418/2[listing10-18]:77", "highlighted_text": "longer lifetime than the reference", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/418/2[listing10-18]:43", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-30T19:34:12.393Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Validating References with Lifetimes", "The Borrow Checker"], "type": "highlight", "uuid": "arvgDkgTpnJdlbJAQrivvA"}, {"removed": true, "timestamp": "2023-10-30T19:36:44.191Z", "type": "highlight", "uuid": "crsvC-f2bYUIL4--YoIoAQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/416/2/1:25", "highlighted_text": "5", "notes": "data", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/416/2/1:24", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-30T19:37:25.470Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Validating References with Lifetimes", "The Borrow Checker"], "type": "highlight", "uuid": "SygxrOGLaRx4yvpl6rxUpQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/418/2[listing10-18]:36", "highlighted_text": "data", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/418/2[listing10-18]:32", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-30T19:37:16.077Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Validating References with Lifetimes", "The Borrow Checker"], "type": "highlight", "uuid": "Bhzl5O9FLvuG6h67T5EAxQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/422", "highlighted_text": "Rust knows that the reference in r will always be valid while x is valid.\n\n", "spine_index": 18, "spine_name": "c10.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/420/1:97", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-10-30T21:12:26.161Z", "toc_family_titles": ["Chapter 10: Generic Types, Traits, and Lifetimes", "Validating References with Lifetimes", "The Borrow Checker"], "type": "highlight", "uuid": "CY9RcVLy8gFcMkautl7RoQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/12/1:225", "highlighted_text": "We can write tests that assert, for example, that when we pass 3 to the add_two function, the returned value is 5. We can run these tests whenever we make changes to our code to make sure any existing correct behavior has not changed.", "spine_index": 19, "spine_name": "c11.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/12/1:0", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-12-08T13:29:02.757Z", "toc_family_titles": ["Chapter 11: Writing Automated Tests"], "type": "highlight", "uuid": "orSqu6Pvg4u2cLknneA-jw"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/22/1:160", "highlighted_text": "which include the test attribute, a few macros, and the should_panic attribute.", "spine_index": 19, "spine_name": "c11.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/22/1:97", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-12-08T11:16:53.526Z", "toc_family_titles": ["Chapter 11: Writing Automated Tests", "How to Write Tests"], "type": "highlight", "uuid": "oz2YrGc0b2N2EOYYZpDFAQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/106/1:536", "highlighted_text": "responsible for one task", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/106/1:512", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-08T13:07:33.689Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Refactoring to Improve Modularity and Error Handling"], "type": "highlight", "uuid": "UFqCyXtzJFf0skzTgH1Euw"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/106/1:495", "highlighted_text": "It’s best to separate functionality so ", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/106/1:456", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-08T13:07:56.526Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Refactoring to Improve Modularity and Error Handling"], "type": "highlight", "uuid": "kPtHm34SV6ZRy9oc8-DwtA"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/106/1:214", "highlighted_text": "our main function now performs two tasks: it parses arguments and reads files.", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/106/1:140", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-08T13:08:11.245Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Refactoring to Improve Modularity and Error Handling"], "type": "highlight", "uuid": "2YgtLPM839uuEKv6J0bfJg"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/126/1:105", "highlighted_text": "main.rs handles running the program and lib.rs handles all the logic of the", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/126/2/1:0", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-08T23:06:28.878Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Refactoring to Improve Modularity and Error Handling", "Separation of Concerns for Binary Projects"], "type": "highlight", "uuid": "aZg8TXxoWDQA-FDqwtulCg"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/126/1:345", "highlighted_text": "The code that remains in main.rs will be small enough to verify its correctness by reading it. ", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/126/1:257", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-08T23:07:44.088Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Refactoring to Improve Modularity and Error Handling", "Separation of Concerns for Binary Projects"], "type": "highlight", "uuid": "bj-7vJWrewbggd89AGilkQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/140/1:108", "highlighted_text": "This rework may seem like overkill for our small program, but we’re refactoring in small, incremental steps.", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/140/1:0", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-08T23:20:28.747Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Refactoring to Improve Modularity and Error Handling", "Separation of Concerns for Binary Projects"], "type": "highlight", "uuid": "bMJUO2ve6D74KvJEgfZOYg"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/108/1:331", "highlighted_text": "query and file_path are configuration variables to our program, variables like contents are used to perform the program’s logic. The longer main becomes, the more variables we’ll need to bring into scope; the more variables we have in scope, the harder it will be to keep track of the purpose of each. ", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/108/2/1:0", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-08T23:22:37.018Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Refactoring to Improve Modularity and Error Handling"], "type": "highlight", "uuid": "uJn8e8jNSQ_DScTIKEvN2Q"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/144/1:243", "highlighted_text": "At the moment, we’re returning a tuple, but then we immediately break that tuple into individual parts again. This is a sign that perhaps we don’t have the right abstraction yet.", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/144/1:65", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-08T23:29:13.158Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Refactoring to Improve Modularity and Error Handling", "Separation of Concerns for Binary Projects"], "type": "highlight", "uuid": "Ab9HA2rop37EVlouQl1fzg"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/156/1:123", "highlighted_text": "The signature of parse_config now indicates that it returns a Config value ❻.", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/156/1:65", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-08T23:37:03.002Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Refactoring to Improve Modularity and Error Handling", "Separation of Concerns for Binary Projects"], "type": "highlight", "uuid": "gb21FoEfP3ySHkMd-yHluw"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/234/1:146", "highlighted_text": "Using unwrap_or_else allows us to define", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/234/1:120", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T06:57:25.134Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Refactoring to Improve Modularity and Error Handling", "Fixing the Error Handling"], "type": "highlight", "uuid": "jC9tV_roy2tOo2bzK6K0nA"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/234/1:181", "highlighted_text": "some custom, non-panic! error handling. ", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/234/1:147", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T06:57:58.332Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Refactoring to Improve Modularity and Error Handling", "Fixing the Error Handling"], "type": "highlight", "uuid": "dBNWv-Pv8QpL3dzekBz1IQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/234/1:287", "highlighted_text": "similar to unwrap: it returns the inner value that Ok is wrapping.", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/234/1:229", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T06:58:42.092Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Refactoring to Improve Modularity and Error Handling", "Fixing the Error Handling"], "type": "highlight", "uuid": "hDmg1S3doizc3hWvDMj6dw"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/268/1:401", "highlighted_text": "For now, just know that Box<dyn Error> means the function will return a type that implements the Error trait, but we don’t have to specify what particular type the return value will be. This gives us flexibility to return error values that may be of different types in different error cases. ", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/268/1:128", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T07:11:56.761Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Refactoring to Improve Modularity and Error Handling", "Extracting Logic from main"], "type": "highlight", "uuid": "Vyt-QpVgD7UawT8UhBQRlQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/272/1:377", "highlighted_text": "we’re calling run for its side effects only; it doesn’t return a value we need.", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/272/1:301", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T07:17:19.789Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Refactoring to Improve Modularity and Error Handling", "Extracting Logic from main"], "type": "highlight", "uuid": "8MEe2y4BqyoNf40VZL3Lvw"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/288/1:135", "highlighted_text": " The run function doesn’t return a value that we want to unwrap", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/288/1:81", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T07:22:48.618Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Refactoring to Improve Modularity and Error Handling", "Extracting Logic from main"], "type": "highlight", "uuid": "2KcDtuF1CwYWrfIBdXBd8g"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/288/1:259", "highlighted_text": "in the success case, we only care about detecting an error, ", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/288/1:199", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T07:23:46.484Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Refactoring to Improve Modularity and Error Handling", "Extracting Logic from main"], "type": "highlight", "uuid": "IVGs-2UjagfzqTBlXUrHrw"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/294/1:170", "highlighted_text": "we can test the code and have a src/main.rs file with fewer responsibilities.", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/294/1:105", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T07:24:58.713Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Refactoring to Improve Modularity and Error Handling", "Splitting Code into a Library Crate"], "type": "highlight", "uuid": "vnYiQybSi3IFPsM63SolvQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/308/1:160", "highlighted_text": "We now have a library crate that has a public API we can test!", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/308/1:98", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T07:27:10.316Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Refactoring to Improve Modularity and Error Handling", "Splitting Code into a Library Crate"], "type": "highlight", "uuid": "kG-ZTGnj5_G59wBnKpWugQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/326/1:168", "highlighted_text": "Now that we’ve extracted the logic into src/lib.rs and left the argument collecting and error handling in src/main.rs, it’s much easier to write tests for the core functionality of our code. ", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/326/1:0", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T07:42:25.047Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Developing the Library’s Functionality with Test-Driven Development"], "type": "highlight", "uuid": "k0ZdYU6428SNFtisdpTyVw"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/358/1:161", "highlighted_text": "we tell Rust that the data returned by the search function will live as long as the data passed into the search function in the contents argument. This is important!", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/358/1:16", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T07:54:29.894Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Developing the Library’s Functionality with Test-Driven Development", "Writing a Failing Test"], "type": "highlight", "uuid": "zLbRusoXQfdZBIFnvauLwA"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/384/1:69", "highlighted_text": "Rust has a helpful method to handle line-by-line iteration of strings", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/384/1:0", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T07:58:51.318Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Developing the Library’s Functionality with Test-Driven Development", "Writing Code to Pass the Test"], "type": "highlight", "uuid": "7jVCDgAs0UKfftktqv56gA"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/480/1:120", "highlighted_text": "calling to_lowercase creates new data rather than referencing existing data.", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/480/1:56", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T08:18:48.975Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Working with Environment Variables", "Implementing the search_case_insensitive Function"], "type": "highlight", "uuid": "ckO2fpUPRsugsHzua_i2HQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/480/1:55", "highlighted_text": "query is now a String rather than a string slice because", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/480/2/1:0", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T08:19:00.540Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Working with Environment Variables", "Implementing the search_case_insensitive Function"], "type": "highlight", "uuid": "rXyqqmSQh89pNaZ6Gt-zOw"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/480/1:401", "highlighted_text": "need to add an ampersand ❸ because the signature of contains is defined to take a string slice", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/480/1:316", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T08:20:29.183Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Working with Environment Variables", "Implementing the search_case_insensitive Function"], "type": "highlight", "uuid": "FcKVHBB5YZOXwiLzM4nP0w"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/512/10/1:5", "highlighted_text": "variable isn’t set to anything, is_ok will return false", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/512/1:163", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T08:27:38.376Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Working with Environment Variables", "Implementing the search_case_insensitive Function"], "type": "highlight", "uuid": "djs_qKHHlxWXCL0C2ib_Zg"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/512/1:433", "highlighted_text": "We don’t care about the value of the environment variable, just whether it’s set or unset, so we’re checking is_ok rather than using unwrap, expect, or any of the other methods we’ve seen on Result.", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/512/1:263", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T08:28:33.752Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Working with Environment Variables", "Implementing the search_case_insensitive Function"], "type": "highlight", "uuid": "H8c3LHBX-Tbavd38nh2WSQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/514/1:51", "highlighted_text": "We pass the value in the ignore_case variable to the Config instance", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/514/1:0", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T08:30:50.526Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Working with Environment Variables", "Implementing the search_case_insensitive Function"], "type": "highlight", "uuid": "wDuuxhcOoHprhBo1TLsoJQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/536/1:109", "highlighted_text": "Our minigrep program can now do case-insensitive searching controlled by an", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/536/1:42", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T08:33:41.807Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Working with Environment Variables", "Implementing the search_case_insensitive Function"], "type": "highlight", "uuid": "RHXw80AWMb4RtMxQF1twsA"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/536/1:132", "highlighted_text": "environment variable. ", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/536/1:110", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T08:33:50.316Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Working with Environment Variables", "Implementing the search_case_insensitive Function"], "type": "highlight", "uuid": "kGuwHDHanBh1zClI_pA9DQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/538/1:289", "highlighted_text": "try controlling case sensitivity through either a command line argument or an environment variable", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/538/1:191", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T08:34:56.147Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Working with Environment Variables", "Implementing the search_case_insensitive Function"], "type": "highlight", "uuid": "ZjVKfD4AM_Tffv3BtI0YvA"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/544/1:328", "highlighted_text": "This distinction enables users to choose to direct the successful output of a program to a file but still print error messages to the screen.", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/544/1:187", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T08:38:18.973Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Writing Error Messages to Standard Error Instead of Standard Output"], "type": "highlight", "uuid": "kCt9Zg6p5LtFaxMVHU0xPg"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/558/1:96", "highlighted_text": "The > syntax tells the shell to write the contents of standard output to output.txt instead of the screen. ", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/558/1:0", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T08:44:11.146Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Writing Error Messages to Standard Error Instead of Standard Output", "Checking Where Errors Are Written"], "type": "highlight", "uuid": "NPdJdMoZ8URTNP60H1_pXQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/562/1:217", "highlighted_text": "our error message is being printed to standard output. It’s much more useful for error messages like this to be printed to standard error so only data from a successful run ends up in the file. We’ll change that.", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/562/1:5", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T08:45:02.869Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Writing Error Messages to Standard Error Instead of Standard Output", "Checking Where Errors Are Written"], "type": "highlight", "uuid": "EPZI2VwuJs8kcPuepT0x-A"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/570/2/2/1:11", "highlighted_text": "fn main() {", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/570/2/2/1:0", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T08:47:14.729Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Writing Error Messages to Standard Error Instead of Standard Output", "Printing Errors to Standard Error"], "type": "highlight", "uuid": "y59OM6rqFmHZpqQb2P9-pw"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/594/1:467", "highlighted_text": "your code will be well organized, store data effectively in the appropriate data structures, handle errors nicely, and be well tested.", "spine_index": 20, "spine_name": "c12.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/594/1:333", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T08:50:18.211Z", "toc_family_titles": ["Chapter 12: An I/O Project: Building a Command Line Program", "Summary"], "type": "highlight", "uuid": "a7Xn6Sd0RjUEfLnPFjdsCg"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/18/1:308", "highlighted_text": "functions, closures can capture values from the scope in which they’re defined", "spine_index": 21, "spine_name": "c13.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/18/1:230", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-03-09T14:38:42.931Z", "toc_family_titles": ["Chapter 13: Functional Language Features: Iterators and Closures", "Closures: Anonymous Functions That Capture Their Environment"], "type": "highlight", "uuid": "sfKTFX4558fNgYCYYkNzLQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/56/1:128", "highlighted_text": "or two main reasons. One is for reuse of code: you can implement particular behavior for one type,", "spine_index": 25, "spine_name": "c17.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/56/1:30", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-05-02T21:10:13.971Z", "toc_family_titles": ["Chapter 17: Object-Oriented Programming Features", "Characteristics of Object-Oriented Languages", "Inheritance as a Type System and as Code Sharing"], "type": "highlight", "uuid": "omV2otL2Mf44ezMzet-NuQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/56/1:206", "highlighted_text": "reuse that implementation for a different type", "spine_index": 25, "spine_name": "c17.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/56/1:160", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-05-02T21:10:24.833Z", "toc_family_titles": ["Chapter 17: Object-Oriented Programming Features", "Characteristics of Object-Oriented Languages", "Inheritance as a Type System and as Code Sharing"], "type": "highlight", "uuid": "kdjJWWyFCApidGS9Yh4siw"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/22/2/1:166", "highlighted_text": "https://doc.rust-lang.org/cargo\n/reference/manifest.html", "spine_index": 10, "spine_name": "c02.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/22/2/1:110", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-05-06T08:12:49.636Z", "toc_family_titles": ["Chapter 2: Programming a Guessing Game", "Setting Up a New Project"], "type": "highlight", "uuid": "NByHsWilXv7VbTyZyzyOyg"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/44/2/1:186", "highlighted_text": "&mut guess", "spine_index": 10, "spine_name": "c02.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/44/2/1:176", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-05-06T08:16:10.991Z", "toc_family_titles": ["Chapter 2: Programming a Guessing Game", "Processing a Guess"], "type": "highlight", "uuid": "VvMESMyQStxXhe4lz65p2g"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/44/2/1:116", "highlighted_text": "mut", "spine_index": 10, "spine_name": "c02.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/44/2/1:113", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-05-06T08:16:14.494Z", "toc_family_titles": ["Chapter 2: Programming a Guessing Game", "Processing a Guess"], "type": "highlight", "uuid": "_ZX2y17AABi8jFBFz68HtQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/52/2/1:7", "highlighted_text": " Rust has a set of items defined in the standard library that it brings into the scope of every program. This set is called the prelude", "spine_index": 10, "spine_name": "c02.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/52/1:11", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-05-06T08:17:53.154Z", "toc_family_titles": ["Chapter 2: Programming a Guessing Game", "Processing a Guess"], "type": "highlight", "uuid": "K7MZWB4TILKbXcPS4Lcu8w"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/52/1:177", "highlighted_text": " https://doc.rust-lang.org/std/prelude/index.html", "spine_index": 10, "spine_name": "c02.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/52/1:176", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-05-06T08:18:04.530Z", "toc_family_titles": ["Chapter 2: Programming a Guessing Game", "Processing a Guess"], "type": "highlight", "uuid": "IXiTdOi27BdP7nNlWYAHFA"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/54/1:117", "highlighted_text": "If a type you want to use isn’t in the prelude, you have to bring that type into scope explicitly with a use statement. ", "spine_index": 10, "spine_name": "c02.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/54/1:0", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-05-06T08:18:46.664Z", "toc_family_titles": ["Chapter 2: Programming a Guessing Game", "Processing a Guess"], "type": "highlight", "uuid": "3IK7UBPoXlNpIrGPrdBqXA"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/62/1:71", "highlighted_text": "println! is a macro that prints a string to the screen", "spine_index": 10, "spine_name": "c02.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/62/4/1:0", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-05-06T08:19:49.676Z", "toc_family_titles": ["Chapter 2: Programming a Guessing Game", "Processing a Guess"], "type": "highlight", "uuid": "xAKkLKEvUG9wlAlGgiHIpw"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/78/4/1:1", "highlighted_text": "creates a new variable named apples and binds it to the value 5", "spine_index": 10, "spine_name": "c02.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/78/1:10", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-05-06T08:20:42.151Z", "toc_family_titles": ["Chapter 2: Programming a Guessing Game", "Processing a Guess", "Storing Values with Variables"], "type": "highlight", "uuid": "sD5atC3Xp6bqBkz61DGXkA"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/84/1:176", "highlighted_text": "The equal sign (=) tells Rust we want to bind something to the variable now.", "spine_index": 10, "spine_name": "c02.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/84/1:101", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-05-06T08:21:40.078Z", "toc_family_titles": ["Chapter 2: Programming a Guessing Game", "Processing a Guess", "Storing Values with Variables"], "type": "highlight", "uuid": "cIWdgq-qZ3z8jIstrJtSCQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/84/14/1:6", "highlighted_text": "calling String::new, a function that returns a new instance of a String. String", "spine_index": 10, "spine_name": "c02.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/84/1:263", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-05-06T08:22:04.991Z", "toc_family_titles": ["Chapter 2: Programming a Guessing Game", "Processing a Guess", "Storing Values with Variables"], "type": "highlight", "uuid": "iNdcWyJdBJkuf2InH8PwzA"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/84/1:416", "highlighted_text": " is a string type provided by the standard library that is a growable, UTF-8 encoded bit of text.", "spine_index": 10, "spine_name": "c02.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/84/1:319", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-05-06T08:22:19.911Z", "toc_family_titles": ["Chapter 2: Programming a Guessing Game", "Processing a Guess", "Storing Values with Variables"], "type": "highlight", "uuid": "BwezEgas6-Jw4QIa4hptOQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/86/1:66", "highlighted_text": "associated function", "spine_index": 10, "spine_name": "c02.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/86/1:47", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-05-06T08:22:28.967Z", "toc_family_titles": ["Chapter 2: Programming a Guessing Game", "Processing a Guess", "Storing Values with Variables"], "type": "highlight", "uuid": "BKe6d9gBBth-0PGtUMQZvw"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/86/1:79", "highlighted_text": "of the String type", "spine_index": 10, "spine_name": "c02.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/86/1:67", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-05-06T08:22:36.740Z", "toc_family_titles": ["Chapter 2: Programming a Guessing Game", "Processing a Guess", "Storing Values with Variables"], "type": "highlight", "uuid": "FlWK9J4iPNBqqiLwxcZezw"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/86/4/1:5", "highlighted_text": "::new", "spine_index": 10, "spine_name": "c02.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/86/4/1:0", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-05-06T08:22:42.109Z", "toc_family_titles": ["Chapter 2: Programming a Guessing Game", "Processing a Guess", "Storing Values with Variables"], "type": "highlight", "uuid": "eK6-zJxXcnFetpMQLeZbAg"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/86/12/1:6", "highlighted_text": "An associated function is a function that’s implemented on a type, in this case String", "spine_index": 10, "spine_name": "c02.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/86/1:81", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-05-06T08:23:02.962Z", "toc_family_titles": ["Chapter 2: Programming a Guessing Game", "Processing a Guess", "Storing Values with Variables"], "type": "highlight", "uuid": "wXCp0kj_TxFOlfCQdoWYXQ"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/86/1:188", "highlighted_text": " This new function creates a new, empty string. ", "spine_index": 10, "spine_name": "c02.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/86/1:143", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-05-06T08:23:23.997Z", "toc_family_titles": ["Chapter 2: Programming a Guessing Game", "Processing a Guess", "Storing Values with Variables"], "type": "highlight", "uuid": "Yt42WCBqajuAqAl1eJasbg"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/92/1:86", "highlighted_text": "included the input/output functionality from the standard library with ", "spine_index": 10, "spine_name": "c02.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/92/1:15", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-05-06T08:25:09.383Z", "toc_family_titles": ["Chapter 2: Programming a Guessing Game", "Processing a Guess", "Receiving User Input"], "type": "highlight", "uuid": "r3j169AzYyUJnnHpAAaa6g"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/92/2/1:11", "highlighted_text": "std::io", "spine_index": 10, "spine_name": "c02.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/92/2/1:4", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-05-06T08:25:14.396Z", "toc_family_titles": ["Chapter 2: Programming a Guessing Game", "Processing a Guess", "Receiving User Input"], "type": "highlight", "uuid": "BP5RlGJpI9GGMCngzc5Img"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/92/1:166", "highlighted_text": "call the stdin function from the io module", "spine_index": 10, "spine_name": "c02.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/92/1:131", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-05-06T08:25:27.935Z", "toc_family_titles": ["Chapter 2: Programming a Guessing Game", "Processing a Guess", "Receiving User Input"], "type": "highlight", "uuid": "RsXXng_udcg45UY1FcPOrA"}, {"end_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/98/1:115", "highlighted_text": "t", "notes": "53 page\n", "spine_index": 10, "spine_name": "c02.xhtml", "start_cfi": "/2/4/2[book-content]/2[sbo-rt-content]/2/98/1:114", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2024-05-06T23:01:23.003Z", "toc_family_titles": ["Chapter 2: Programming a Guessing Game", "Processing a Guess", "Receiving User Input"], "type": "highlight", "uuid": "Rz5dqThv-lt9cBsrXKZ9Gw"}]